*************************
105-117
1.a. auth service setup
1.b. auth k8s setup
1.c. adding skaffold
1.d. ingress-nginx setup
    - mac: code /etc/hosts. windows: C:\Windows\System32\Drivers\etc\hosts
    - open chrome at ticketing.dev/api/users/currentuser and type thisisunsafe

*************************
118-129 - Leveraging a Cloud Enviroment for Development
skipped

*************************
130-148 - Response Normalization Strategies
- creating route handlers
- validation and error handling

*************************
149-164 - DB Management and modeling
- creating mongodb in k8s
- TypeScript and Mongoose cooperation
- userSchema, UserModel, UserDoc
- Mongoose statics properties and pre-save hooks
- adding password hashing

*************************
165-190 - Authentication Strategies and Options
165-180
- Authentication Strategies
    - one auth service responsibe
    vs
    - each ms responsibe for verify user token
- adding Session Support
- generating a JWT
- securely storing secrets with kubernetes:
    kubectl create secret generic jwt-secret --from-literal=JWT_KEY=jwt_secret_key
- creating and accessing secrets
- accessing env variables in a pod
- formatting (and removing) JSON properties4
181-190
- sign-in, sign-out and currentuser routes
- common middlewares: validate-request, current-user, require-auth
- augmenting Type Definitions

*************************
191-208 - Testing Isolated Microservices
- Testing Architecture
- index to app refactor
- new dependencies: npm install --save-dev @types/jest @types/supertest jest ts-jest supertest mongodb-memory-server
- test enviroment setup
- adding unit tests
- handling cookies during testing

*************************
209-246 - Integrating a Server-Side-Rendered React App
209-216 - starting the react next-js app
- starting the react app - create client folder
- npm install react react-dom next bootstrap axios
- building and running Next-JS image in k8s
- adding global CSS
217-223 - adding signup page and useRequest hook
224-236
- fetching data during SSR
- cross namespace service communication
    - kubectl get namespace
    - kubectl get services -n ingress-nginx => ingress-nginx-controller
    - http://ingress-nginx.ingress-nginx-controller.svc.cluster.local 
        => addional option is to use (and create) external name service http://ingress-nginx-srv
- a reusable api client with correct host and cookies
237-246
- building signin signout header components
- moving getInitialProps

*************************
247-256 - Code Sharing and Reuse between services
- publishing npm modules
    - sign in to https://www.npmjs.com/
    - create a new organization (public)
- project common setup
    - mkdir common; cd common; npm init -y;
    - git init; git add .; git commit -m "initial commit";
    - npm login
    - npm publish --access public
    - npm install typescript del-cli --save-dev
    - npm install express express-validator cookie-session jsonwebtoken @types/cookie-session @types/express @types/jsonwebtoken
    - tsc
    - npm run pub
    - in auth: npm install @danitaltech-dev/ticketing-common
    - in auth: npm update @danitaltech-dev/ticketing-common
    - verify update by: kubectl get pods; kubectl exec -it auth-depl-blabla sh; cd node_modules/@danitaltech-dev/ticketing-common; ls; cat package.json; exit
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.

*************************
257-282 CRUD tickets server
257-262 - tickets server setup
263-282 - Test-First Approach
    - index, create, show and update routes
    - permission checking

*************************
283-305 - NATS Streaming Server - An Event Bus Implementation
https://docs.nats.io/
https://hub.docker.com/_/nats-streaming
https://www.npmjs.com/package/node-nats-streaming

- creating a NATS Streaming Deployment
- building a NATS Test project
    - npm install node-nats-streaming ts-node-dev typescript @types/node
    - kubectl get pods
    - kubectl port-forward nats-depl-_id_ 4222:4222
    - npm run publish 
    - kubectl port-forward nats-depl-_id_ 8222:8222
        - localhost:8222/streaming
        - localhost:8222/streaming/chanels?subs=1
- publish events and listening for data
- client id generation, queue groups, manual ack mode
- client health checks, graceful client shutdown
- core concurrency issues!!
- solving concurrency issues ?? => (apache kafka better)
- Events Redelivery and Durable Subscriptions


*************************
306-322 - Connecting to NATS in a NodeJS World
- Reusable NATS Listeners
- The Listener Abstarct class
- Extending the Listener
- Refactor
- Subjects Enum & Custom event interface
- enforcing Listener Subjects & Data Types
- Custom Publisher
- moving Reusable NATS to common module and publish

*************************
323-340 - Managing a NATS client
- NatsWrapper - NATS client singleton
- publishing ticket creation and ticket update
- graceful shutdown
- Handling Publish Failures
    - only theoretical - using transaction database - no implementation!!!
- fixing unit tests - for nats cooperation
- NATS Env variables

*************************
341-368 - Cross-Service Data Replication In Action
- The Orders ms
- setup ordersMS - npm install, sacffolding, ingress